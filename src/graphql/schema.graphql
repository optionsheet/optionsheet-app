scalar Date

type Query {
  users: [User]
  userById(id: ID!): User
  projects: [Project]
  projectById(id: ID!): Project
  trades: [Trade]
  tradeById(id: ID!): Trade
  login(credentials: LoginInput!): AuthDetails
}

input LoginInput {
  username: String
  email: String
  password: String!
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
}

type AuthDetails {
  id: ID!
  token: String!
  username: String!
  email: String!
  imageUrl: String
  roles: [String]!
}

type Mutation {
  register(credentials: RegisterInput!): AuthDetails
}

type User {
  id: ID!
  username: String
  email: String
  emailConfirmed: Boolean
  passwordHash: String
  roles: [Role]
  imageUrl: String
  projects: [Project]
}

type Role {
  id: ID!
  name: String!
}

type Project {
  id: ID!
  name: String!
  description: String
  trades: [Trade]
  tags: [String]
  lastEdited: Date
  user: User!
}

type Trade {
  id: ID!
  symbol: String!
  openDate: Date!
  closeDate: Date
  legs: [Leg]
  openingNote: String
  closingNote: String
  tags: [String]
  project: Project!
}

enum Side {
  Buy,
  Sell
}

enum PutCall {
  Put,
  Call
}

type Leg {
  id: ID!
  side: Side!,
  putCall: PutCall
  quantity: Int!
  expiration: Date
  strike: Float
  openPrice: Float!
  closePrice: Float
  trade: Trade!
}